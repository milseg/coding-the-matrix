from math import sqrt, abs


def forward_no_normalization(v):
    D = {}
    while len(v) > 1:
        k = len(v)
        # v is a k-element list
        vnew = [(v[2*i]+v[2*i+1])/2 for i in range(k//2)]
        # vnew is a k//2-element list
        w = [(v[2*i]-v[2*i+1]) for i in range(k//2)]
        # w is a list of coefficients
        D.update({(k//2, i): w[i] for i in range(k//2)})
        v = vnew
    D[(0,0)] = v[0]
    return D


def normalize_coefficients(n, D):
    R = {}
    for s in range(1, n//2+1):
        for i in range(s):
            R[(s,i)] = D[(s,i)]*sqrt(n/(4*s))
    R[(0,0)] = D[(0,0)]*sqrt(n)
    return R

def forward(v):
    return normalize_coefficients(len(v), forward_no_normalization(v))


def suppress(D, threshold):
    return {k:(0 if abs(v) < threshold else v) for (k,v) in D.items()}

def sparsity(D):
    k = 0
    for v in D:
        if abs(v) > 0:
            k++
    return k/len(D)
